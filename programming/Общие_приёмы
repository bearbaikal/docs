Метод исключений:
Отключение ненужного, чтобы подключить (например, компонент во Vue/Nuxt) в другой компонент или layout.
===
Пример. Есть некоторый компонент userTripDetail (из практики). Он настроен под определённые данные.
Структура данных изменилась. Консоль dev tools в chrome сыпет ошибками, что не найдена такая-то переменная.
Как быть? 

Всё просто. Нужно закомментировать в подключаемом компоненте весь код, в котором идёт обращение к переменным.
После чего прописать в коде вывод переменной из новой модели - убедиться, что переменная подтянулась.
И далее раскомментировать последовательно код, заменяя обращения к свойствам (переменным), делая промежуточные проверки.

Тот же приём можно использовать и в любых других ситуациях, когда не ясно, что именно не работает.
Комментируя код можно исключать неработающие части кода, находить работающую часть и постепенно "ремонтировать" то,
что ещё не работает. Так, виден последовательный результат, который показывает, что движение происходит в нужном направлении.

Метод проверки "на одном" (проверка своих рассуждений)
Если нужно проверить, что какой-либо функционал, который применяется в цикле работает правильно,
то достаточно проверить это лишь для одного элемента из цикла. И потом убедиться, что это работает для всех.
===
Пример. Пишу бэкенд. У меня есть цикл, в котором происходит сбор клиентов и рент по ним в цикле через SOAP-протокол,
даннные отдаёт 1С. Я не понимаю, почему в базе после сбора у одного из клиентов оказалось три ренты, принадлежащих ему.
Делаю запрос через POSTMAN я вижу, что рент по клиенту нет.
Выход: в цикле я устанавливаю условие, чтобы выполнять сбор рент только для одного клиента (нужного мне).
Теперь мне не нужно ждать, пока механизм обойдёт всех клиентов - ведь это долго, вся процедура занимает у меня около 20 минут.
Происходит сбор рент и я вижу, что результат то же - по клиенту есть ренты, причём для проверки я убеждаюсь,
с помощью вывода напрямую в консоль, что ренты есть. Здесь я уже понимаю, что ошибки быть не может - ренты по клиенту действительно присутствуют. Значит я ошибся и не учёл какой-то факт. Я задаю себе вопрос - а откуда я собираю ренты?
И я понимаю, что ренты, которые я собирал находились в подразделении Владивосток (один SOAP-url), а проверяю в POSTMAN я 
по другому SOAP-url-у для филиала Сочи.

